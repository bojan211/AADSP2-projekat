1     	 0000					.public _CURRENT_CH_NUM
2     	 0000					.public _distorsion_gain
3     	 0000					.public _distorsion_mode
4     	 0000					.public _my_state
5     	 0000					.public _sampleBuffer
6     	 0000					.extern _cl_wavread_bits_per_sample
7     	 0000					.extern _cl_wavread_close
8     	 0000					.extern _cl_wavread_frame_rate
9     	 0000					.extern _cl_wavread_getnchannels
10    	 0000					.extern _cl_wavread_number_of_frames
11    	 0000					.extern _cl_wavread_open
12    	 0000					.extern _cl_wavread_recvsample
13    	 0000					.extern _cl_wavwrite_close
14    	 0000					.extern _cl_wavwrite_open
15    	 0000					.extern _cl_wavwrite_sendsample
16    	 0000					.extern _distortionInit
17    	 0000					.public _main
18    	 0000					.extern _printf
19    	 0000					.extern _processing
20    	 0000					.extern _strcpy
21    	 0000					.extern __div
22    							.xdata_ovly
22     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
23    	 0000				_CURRENT_CH_NUM
24    	 0000					.dw  (0x6)
	 0000	 00000006	 
25    							.xdata_ovly
25     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
26    	 0000				__extractedConst_0_1
27    	 0000					.dw  (0x0)
	 0000	 00000000	 
28    	 0001					.dw  (0xe6666666)
	 0001	 E6666666	 
29    	 0002					.dw  (0x66666800)
	 0002	 66666800	 
30    							.xdata_ovly
30     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
31    	 0000				_distorsion_gain
32    	 0000					.bss (0x1)
33    							.xdata_ovly
33     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
34    	 0000				_distorsion_mode
35    	 0000					.dw  (0x0)
	 0000	 00000000	 
36    							.xdata_ovly
36     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
37    	 0000				_my_state
38    	 0000					.bss (0x2)
39    							.ydata_ovly
39     >> start of macro: .ydata_ovly
1+    									seg_single , "Y_OVLY", Y
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_Y_ )
2+    						    segment
3+    						  .else
4+    						    segment "Y_OVLY"
5+    							.if "" != ""
6+    						___SegStart_Y_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .ydata_ovly
40    	 0000				_sampleBuffer
41    	 0000					.bss (0x80)
42    							.xdata_ovly
42     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
43    	 0000				_string_const_0
44    	 0000					.dw  (0x2e)
	 0000	 0000002E	 
45    	 0001					.dw  (0x2e)
	 0001	 0000002E	 
46    	 0002					.dw  (0x2f)
	 0002	 0000002F	 
47    	 0003					.dw  (0x2e)
	 0003	 0000002E	 
48    	 0004					.dw  (0x2e)
	 0004	 0000002E	 
49    	 0005					.dw  (0x2f)
	 0005	 0000002F	 
50    	 0006					.dw  (0x54)
	 0006	 00000054	 
51    	 0007					.dw  (0x65)
	 0007	 00000065	 
52    	 0008					.dw  (0x73)
	 0008	 00000073	 
53    	 0009					.dw  (0x74)
	 0009	 00000074	 
54    	 000A					.dw  (0x53)
	 000A	 00000053	 
55    	 000B					.dw  (0x74)
	 000B	 00000074	 
56    	 000C					.dw  (0x72)
	 000C	 00000072	 
57    	 000D					.dw  (0x65)
	 000D	 00000065	 
58    	 000E					.dw  (0x61)
	 000E	 00000061	 
59    	 000F					.dw  (0x6d)
	 000F	 0000006D	 
60    	 0010					.dw  (0x73)
	 0010	 00000073	 
61    	 0011					.dw  (0x2f)
	 0011	 0000002F	 
62    	 0012					.dw  (0x54)
	 0012	 00000054	 
63    	 0013					.dw  (0x6f)
	 0013	 0000006F	 
64    	 0014					.dw  (0x6e)
	 0014	 0000006E	 
65    	 0015					.dw  (0x65)
	 0015	 00000065	 
66    	 0016					.dw  (0x5f)
	 0016	 0000005F	 
67    	 0017					.dw  (0x4c)
	 0017	 0000004C	 
68    	 0018					.dw  (0x31)
	 0018	 00000031	 
69    	 0019					.dw  (0x6b)
	 0019	 0000006B	 
70    	 001A					.dw  (0x5f)
	 001A	 0000005F	 
71    	 001B					.dw  (0x52)
	 001B	 00000052	 
72    	 001C					.dw  (0x33)
	 001C	 00000033	 
73    	 001D					.dw  (0x6b)
	 001D	 0000006B	 
74    	 001E					.dw  (0x2e)
	 001E	 0000002E	 
75    	 001F					.dw  (0x77)
	 001F	 00000077	 
76    	 0020					.dw  (0x61)
	 0020	 00000061	 
77    	 0021					.dw  (0x76)
	 0021	 00000076	 
78    	 0022					.dw  (0x0)
	 0022	 00000000	 
79    							.xdata_ovly
79     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
80    	 0000				_string_const_1
81    	 0000					.dw  (0x45)
	 0000	 00000045	 
82    	 0001					.dw  (0x72)
	 0001	 00000072	 
83    	 0002					.dw  (0x72)
	 0002	 00000072	 
84    	 0003					.dw  (0x6f)
	 0003	 0000006F	 
85    	 0004					.dw  (0x72)
	 0004	 00000072	 
86    	 0005					.dw  (0x3a)
	 0005	 0000003A	 
87    	 0006					.dw  (0x20)
	 0006	 00000020	 
88    	 0007					.dw  (0x43)
	 0007	 00000043	 
89    	 0008					.dw  (0x6f)
	 0008	 0000006F	 
90    	 0009					.dw  (0x75)
	 0009	 00000075	 
91    	 000A					.dw  (0x6c)
	 000A	 0000006C	 
92    	 000B					.dw  (0x64)
	 000B	 00000064	 
93    	 000C					.dw  (0x20)
	 000C	 00000020	 
94    	 000D					.dw  (0x6e)
	 000D	 0000006E	 
95    	 000E					.dw  (0x6f)
	 000E	 0000006F	 
96    	 000F					.dw  (0x74)
	 000F	 00000074	 
97    	 0010					.dw  (0x20)
	 0010	 00000020	 
98    	 0011					.dw  (0x6f)
	 0011	 0000006F	 
99    	 0012					.dw  (0x70)
	 0012	 00000070	 
100   	 0013					.dw  (0x65)
	 0013	 00000065	 
101   	 0014					.dw  (0x6e)
	 0014	 0000006E	 
102   	 0015					.dw  (0x20)
	 0015	 00000020	 
103   	 0016					.dw  (0x77)
	 0016	 00000077	 
104   	 0017					.dw  (0x61)
	 0017	 00000061	 
105   	 0018					.dw  (0x76)
	 0018	 00000076	 
106   	 0019					.dw  (0x65)
	 0019	 00000065	 
107   	 001A					.dw  (0x66)
	 001A	 00000066	 
108   	 001B					.dw  (0x69)
	 001B	 00000069	 
109   	 001C					.dw  (0x6c)
	 001C	 0000006C	 
110   	 001D					.dw  (0x65)
	 001D	 00000065	 
111   	 001E					.dw  (0x2e)
	 001E	 0000002E	 
112   	 001F					.dw  (0xa)
	 001F	 0000000A	 
113   	 0020					.dw  (0x0)
	 0020	 00000000	 
114   							.xdata_ovly
114    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
115   	 0000				_string_const_2
116   	 0000					.dw  (0x2e)
	 0000	 0000002E	 
117   	 0001					.dw  (0x2e)
	 0001	 0000002E	 
118   	 0002					.dw  (0x2f)
	 0002	 0000002F	 
119   	 0003					.dw  (0x2e)
	 0003	 0000002E	 
120   	 0004					.dw  (0x2e)
	 0004	 0000002E	 
121   	 0005					.dw  (0x2f)
	 0005	 0000002F	 
122   	 0006					.dw  (0x6f)
	 0006	 0000006F	 
123   	 0007					.dw  (0x75)
	 0007	 00000075	 
124   	 0008					.dw  (0x74)
	 0008	 00000074	 
125   	 0009					.dw  (0x53)
	 0009	 00000053	 
126   	 000A					.dw  (0x70)
	 000A	 00000070	 
127   	 000B					.dw  (0x65)
	 000B	 00000065	 
128   	 000C					.dw  (0x65)
	 000C	 00000065	 
129   	 000D					.dw  (0x63)
	 000D	 00000063	 
130   	 000E					.dw  (0x68)
	 000E	 00000068	 
131   	 000F					.dw  (0x2f)
	 000F	 0000002F	 
132   	 0010					.dw  (0x6f)
	 0010	 0000006F	 
133   	 0011					.dw  (0x75)
	 0011	 00000075	 
134   	 0012					.dw  (0x74)
	 0012	 00000074	 
135   	 0013					.dw  (0x5f)
	 0013	 0000005F	 
136   	 0014					.dw  (0x6d)
	 0014	 0000006D	 
137   	 0015					.dw  (0x6f)
	 0015	 0000006F	 
138   	 0016					.dw  (0x64)
	 0016	 00000064	 
139   	 0017					.dw  (0x65)
	 0017	 00000065	 
140   	 0018					.dw  (0x6c)
	 0018	 0000006C	 
141   	 0019					.dw  (0x33)
	 0019	 00000033	 
142   	 001A					.dw  (0x2e)
	 001A	 0000002E	 
143   	 001B					.dw  (0x77)
	 001B	 00000077	 
144   	 001C					.dw  (0x61)
	 001C	 00000061	 
145   	 001D					.dw  (0x76)
	 001D	 00000076	 
146   	 001E					.dw  (0x0)
	 001E	 00000000	 
147   							.xdata_ovly
147    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
148   	 0000				_string_const_3
149   	 0000					.dw  (0x45)
	 0000	 00000045	 
150   	 0001					.dw  (0x72)
	 0001	 00000072	 
151   	 0002					.dw  (0x72)
	 0002	 00000072	 
152   	 0003					.dw  (0x6f)
	 0003	 0000006F	 
153   	 0004					.dw  (0x72)
	 0004	 00000072	 
154   	 0005					.dw  (0x3a)
	 0005	 0000003A	 
155   	 0006					.dw  (0x20)
	 0006	 00000020	 
156   	 0007					.dw  (0x43)
	 0007	 00000043	 
157   	 0008					.dw  (0x6f)
	 0008	 0000006F	 
158   	 0009					.dw  (0x75)
	 0009	 00000075	 
159   	 000A					.dw  (0x6c)
	 000A	 0000006C	 
160   	 000B					.dw  (0x64)
	 000B	 00000064	 
161   	 000C					.dw  (0x20)
	 000C	 00000020	 
162   	 000D					.dw  (0x6e)
	 000D	 0000006E	 
163   	 000E					.dw  (0x6f)
	 000E	 0000006F	 
164   	 000F					.dw  (0x74)
	 000F	 00000074	 
165   	 0010					.dw  (0x20)
	 0010	 00000020	 
166   	 0011					.dw  (0x6f)
	 0011	 0000006F	 
167   	 0012					.dw  (0x70)
	 0012	 00000070	 
168   	 0013					.dw  (0x65)
	 0013	 00000065	 
169   	 0014					.dw  (0x6e)
	 0014	 0000006E	 
170   	 0015					.dw  (0x20)
	 0015	 00000020	 
171   	 0016					.dw  (0x77)
	 0016	 00000077	 
172   	 0017					.dw  (0x61)
	 0017	 00000061	 
173   	 0018					.dw  (0x76)
	 0018	 00000076	 
174   	 0019					.dw  (0x65)
	 0019	 00000065	 
175   	 001A					.dw  (0x66)
	 001A	 00000066	 
176   	 001B					.dw  (0x69)
	 001B	 00000069	 
177   	 001C					.dw  (0x6c)
	 001C	 0000006C	 
178   	 001D					.dw  (0x65)
	 001D	 00000065	 
179   	 001E					.dw  (0x2e)
	 001E	 0000002E	 
180   	 001F					.dw  (0xa)
	 001F	 0000000A	 
181   	 0020					.dw  (0x0)
	 0020	 00000000	 
182   							.code_ovly
182    >> start of macro: .code_ovly
1+    									seg_single , "CODE_OVLY", CODE
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_CODE_ )
2+    						    segment
3+    						  .else
4+    						    segment "CODE_OVLY"
5+    							.if "" != ""
6+    						___SegStart_CODE_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .code_ovly
183   						
184   						
185   						
186   							# This construction should ensure linking of crt0 in case when target is a standalone program without the OS
187   							.if defined(_OVLY_)
188   								.if .strcmp('standalone',_OVLY_)=0
189   								.if .strcmp('crystal32',_TARGET_FAMILY_)=0
190   	 0000							.extern __start         # dummy use of __start to force linkage of crt0
191   	 0000				dummy		.equ(__start)
192   								.else
193   									.extern __intvec         # dummy use of __intvec to force linkage of intvec
194   						dummy		.equ(__intvec)
195   								.endif
196   								.endif
197   							.endif
198   						
199   	 0000				_main:			/* LN: 17 | CYCLE: 0 | RULES: () */ 
200   	 0000	 BB540007		xmem[i7] = i7			# LN: 17 | 
201   	 0001	 020F7FFF		i7 += 1			# LN: 17 | 
202   	 0002	 87750211		i7 = i7 + (0x211)			# LN: 17 | 
203   	 0003	 91750001		i1 = i7 - (0x1)			# LN: 17 | 
204   	 0004	 98540001		xmem[i1] = a0h			# LN: 17 | 
205   	 0005	 91750002		i1 = i7 - (0x2)			# LN: 17 | 
206   	 0006	 B0540001		xmem[i1] = i0			# LN: 17 | 
207   	 0007				cline_17_0:			/* LN: 34 | CYCLE: 0 | RULES: () */ 
208   	 0007	 90750003		i0 = i7 - (0x3)			# LN: 34 | 
209   	 0008	 00004DC0		a0 = 0			# LN: 34 | 
210   	 0009	 98540000		xmem[i0] = a0h			# LN: 34 | 
211   	 000A	 80800026		do (0x8), label_end_93			# LN: 34 | 
212   	 000B				cline_34_0:			/* LN: 35 | CYCLE: 0 | RULES: () */ 
213   	 000B				label_begin_93:			/* LN: 34 | CYCLE: 0 | RULES: () */ 
214   	 000B	 90750004		i0 = i7 - (0x4)			# LN: 35 | 
215   	 000C	 00004DC0		a0 = 0			# LN: 35 | 
216   	 000D	 98540000		xmem[i0] = a0h			# LN: 35 | 
217   	 000E	 81000020		do (0x10), label_end_92			# LN: 35 | 
218   	 000F				cline_35_0:			/* LN: 36 | CYCLE: 0 | RULES: () */ 
219   	 000F				label_begin_92:			/* LN: 35 | CYCLE: 0 | RULES: () */ 
220   	 000F	 90750003		i0 = i7 - (0x3)			# LN: 36 | 
221   	 0010	 18404DC1		a0 = xmem[i0]; a1 = 0			# LN: 36, 36 | 
222   	 0011	 00004EC0		a0 = a0 << 4			# LN: 36 | 
223   	 0012	 48707FFF		i0 = a0			# LN: 36 | 
224   	 0013	 91750004		i1 = i7 - (0x4)			# LN: 36 | 
225   	 0014	 80050000		i0 = i0 + (_sampleBuffer + 0)			# LN: 36 | 
226   	 0015	 88140001		a0 = xmem[i1]			# LN: 36 | 
227   	 0016	 0C707FFF		b0 = i0			# LN: 36 | 
228   	 0017	 00004420		a0 = a0 + b0			# LN: 36 | 
229   	 0018	 98090030		AnyReg(i0, a0h)			# LN: 36 | 
230   	 0019	 00007FFF		nop #empty cycle
231   	 001A	 99D40000		ymem[i0] = a1h			# LN: 36 | 
232   	 001B				cline_36_0:			/* LN: 35 | CYCLE: 0 | RULES: () */ 
233   	 001B				init_latch_label_0:			/* LN: 36 | CYCLE: 0 | RULES: () */ 
234   	 001B	 90750004		i0 = i7 - (0x4)			# LN: 35 | 
235   	 001C	 88140000		a0 = xmem[i0]			# LN: 35 | 
236   	 001D	 894A0001		uhalfword(a1) = (0x1)			# LN: 35 | 
237   	 001E	 00004408		a0 = a0 + a1			# LN: 35 | 
238   	 001F	 90750004		i0 = i7 - (0x4)			# LN: 35 | 
239   	 0020				label_end_92:			# LN: 35 | CYCLE: 5 | RULES: ()
240   	 0020	 98540000		xmem[i0] = a0h			# LN: 35 | 
241   	 0021				cline_35_1:			/* LN: 34 | CYCLE: 0 | RULES: () */ 
242   	 0021				init_latch_label_1:			/* LN: 36 | CYCLE: 0 | RULES: () */ 
243   	 0021				for_end_1:			/* LN: 35 | CYCLE: 0 | RULES: () */ 
244   	 0021	 90750003		i0 = i7 - (0x3)			# LN: 34 | 
245   	 0022	 88140000		a0 = xmem[i0]			# LN: 34 | 
246   	 0023	 894A0001		uhalfword(a1) = (0x1)			# LN: 34 | 
247   	 0024	 00004408		a0 = a0 + a1			# LN: 34 | 
248   	 0025	 90750003		i0 = i7 - (0x3)			# LN: 34 | 
249   	 0026				label_end_93:			# LN: 34 | CYCLE: 5 | RULES: ()
250   	 0026	 98540000		xmem[i0] = a0h			# LN: 34 | 
251   	 0027				cline_34_1:			/* LN: 41 | CYCLE: 0 | RULES: () */ 
252   	 0027				for_end_0:			/* LN: 34 | CYCLE: 0 | RULES: () */ 
253   	 0027	 90750104		i0 = i7 - (260 - 0)			# LN: 41 | 
254   	 0028	 A1050000		i1 = (0) + (_string_const_0)			# LN: 41 | 
255   	 0029	 80880000		call (_strcpy)			# LN: 41 | 
256   	 002A				cline_41_0:			/* LN: 42 | CYCLE: 0 | RULES: () */ 
257   	 002A	 90750104		i0 = i7 - (260 - 0)			# LN: 42 | 
258   	 002B	 80880000		call (_cl_wavread_open)			# LN: 42 | 
259   	 002C	 98090030		AnyReg(i0, a0h)			# LN: 42 | 
260   	 002D	 91750105		i1 = i7 - (0x105)			# LN: 42 | 
261   	 002E	 B0540001		xmem[i1] = i0			# LN: 42 | 
262   	 002F				cline_42_0:			/* LN: 43 | CYCLE: 0 | RULES: () */ 
263   	 002F	 90750105		i0 = i7 - (0x105)			# LN: 43 | 
264   	 0030	 88140000		a0 = xmem[i0]			# LN: 43 | 
265   	 0031	 00004E80		a0 & a0			# LN: 43 | 
266   	 0032	 84480037		if (a != 0) jmp (else_0)			# LN: 43 | 
267   	 0033				cline_43_0:			/* LN: 45 | CYCLE: 0 | RULES: () */ 
268   	 0033	 A0050000		i0 = (0) + (_string_const_1)			# LN: 45 | 
269   	 0034	 80880000		call (_printf)			# LN: 45 | 
270   	 0035				cline_45_0:			/* LN: 46 | CYCLE: 0 | RULES: () */ 
271   	 0035	 886AFFFF		halfword(a0) = (0xffff)			# LN: 46 | 
272   	 0036	 800800EB		jmp (__epilogue_228)			# LN: 46 | 
273   	 0037				cline_46_0:			/* LN: 52 | CYCLE: 0 | RULES: () */ 
274   	 0037				endif_0:			/* LN: 43 | CYCLE: 0 | RULES: () */ 
275   	 0037				else_0:			/* LN: 43 | CYCLE: 0 | RULES: () */ 
276   	 0037	 90750105		i0 = i7 - (0x105)			# LN: 52 | 
277   	 0038	 B0140000		i0 = xmem[i0]			# LN: 52 | 
278   	 0039	 80880000		call (_cl_wavread_getnchannels)			# LN: 52 | 
279   	 003A	 90750106		i0 = i7 - (0x106)			# LN: 52 | 
280   	 003B	 98540000		xmem[i0] = a0h			# LN: 52 | 
281   	 003C				cline_52_0:			/* LN: 53 | CYCLE: 0 | RULES: () */ 
282   	 003C	 90750105		i0 = i7 - (0x105)			# LN: 53 | 
283   	 003D	 B0140000		i0 = xmem[i0]			# LN: 53 | 
284   	 003E	 80880000		call (_cl_wavread_bits_per_sample)			# LN: 53 | 
285   	 003F	 90750107		i0 = i7 - (0x107)			# LN: 53 | 
286   	 0040	 98540000		xmem[i0] = a0h			# LN: 53 | 
287   	 0041				cline_53_0:			/* LN: 54 | CYCLE: 0 | RULES: () */ 
288   	 0041	 90750105		i0 = i7 - (0x105)			# LN: 54 | 
289   	 0042	 B0140000		i0 = xmem[i0]			# LN: 54 | 
290   	 0043	 80880000		call (_cl_wavread_frame_rate)			# LN: 54 | 
291   	 0044	 90750108		i0 = i7 - (0x108)			# LN: 54 | 
292   	 0045	 98540000		xmem[i0] = a0h			# LN: 54 | 
293   	 0046				cline_54_0:			/* LN: 55 | CYCLE: 0 | RULES: () */ 
294   	 0046	 90750105		i0 = i7 - (0x105)			# LN: 55 | 
295   	 0047	 B0140000		i0 = xmem[i0]			# LN: 55 | 
296   	 0048	 80880000		call (_cl_wavread_number_of_frames)			# LN: 55 | 
297   	 0049	 90750109		i0 = i7 - (0x109)			# LN: 55 | 
298   	 004A	 98540000		xmem[i0] = a0h			# LN: 55 | 
299   	 004B				cline_55_0:			/* LN: 61 | CYCLE: 0 | RULES: () */ 
300   	 004B	 90750209		i0 = i7 - (521 - 0)			# LN: 61 | 
301   	 004C	 A1050000		i1 = (0) + (_string_const_2)			# LN: 61 | 
302   	 004D	 80880000		call (_strcpy)			# LN: 61 | 
303   	 004E				cline_61_0:			/* LN: 62 | CYCLE: 0 | RULES: () */ 
304   	 004E	 90750209		i0 = i7 - (521 - 0)			# LN: 62 | 
305   	 004F	 91750107		i1 = i7 - (0x107)			# LN: 62 | 
306   	 0050	 88140001		a0 = xmem[i1]			# LN: 62 | 
307   	 0051	 89040000		a1 = xmem[_CURRENT_CH_NUM + 0]			# LN: 62 | 
308   	 0052	 91750108		i1 = i7 - (0x108)			# LN: 62 | 
309   	 0053	 8C140001		b0 = xmem[i1]			# LN: 62 | 
310   	 0054	 80880000		call (_cl_wavwrite_open)			# LN: 62 | 
311   	 0055	 98090030		AnyReg(i0, a0h)			# LN: 62 | 
312   	 0056	 9175020A		i1 = i7 - (0x20a)			# LN: 62 | 
313   	 0057	 B0540001		xmem[i1] = i0			# LN: 62 | 
314   	 0058				cline_62_0:			/* LN: 63 | CYCLE: 0 | RULES: () */ 
315   	 0058	 9075020A		i0 = i7 - (0x20a)			# LN: 63 | 
316   	 0059	 88140000		a0 = xmem[i0]			# LN: 63 | 
317   	 005A	 00004E80		a0 & a0			# LN: 63 | 
318   	 005B	 84480060		if (a != 0) jmp (else_1)			# LN: 63 | 
319   	 005C				cline_63_0:			/* LN: 65 | CYCLE: 0 | RULES: () */ 
320   	 005C	 A0050000		i0 = (0) + (_string_const_3)			# LN: 65 | 
321   	 005D	 80880000		call (_printf)			# LN: 65 | 
322   	 005E				cline_65_0:			/* LN: 66 | CYCLE: 0 | RULES: () */ 
323   	 005E	 886AFFFF		halfword(a0) = (0xffff)			# LN: 66 | 
324   	 005F	 800800EB		jmp (__epilogue_228)			# LN: 66 | 
325   	 0060				cline_66_0:			/* LN: 79 | CYCLE: 0 | RULES: () */ 
326   	 0060				endif_1:			/* LN: 63 | CYCLE: 0 | RULES: () */ 
327   	 0060				else_1:			/* LN: 63 | CYCLE: 0 | RULES: () */ 
328   	 0060	 9075020B		i0 = i7 - (0x20b)			# LN: 79 | 
329   	 0061	 00004DC0		a0 = 0			# LN: 79 | 
330   	 0062	 98540000		xmem[i0] = a0h			# LN: 79 | 
331   	 0063				for_2:			/* LN: 79 | CYCLE: 0 | RULES: () */ 
332   	 0063	 90750109		i0 = i7 - (0x109)			# LN: 79 | 
333   	 0064	 88140000		a0 = xmem[i0]			# LN: 79 | 
334   	 0065	 894A0010		uhalfword(a1) = (0x10)			# LN: 79 | 
335   	 0066	 80880000		call (__div)			# LN: 79 | 
336   	 0067	 9075020B		i0 = i7 - (0x20b)			# LN: 79 | 
337   	 0068	 89140000		a1 = xmem[i0]			# LN: 79 | 
338   	 0069	 00004F01		a1 - a0			# LN: 79 | 
339   	 006A	 84C800E3		if (a >= 0) jmp (for_end_2)			# LN: 79 | 
340   	 006B				cline_79_0:			/* LN: 81 | CYCLE: 0 | RULES: () */ 
341   	 006B	 9075020C		i0 = i7 - (0x20c)			# LN: 81 | 
342   	 006C	 00004DC0		a0 = 0			# LN: 81 | 
343   	 006D	 98540000		xmem[i0] = a0h			# LN: 81 | 
344   	 006E	 81000096		do (0x10), label_end_94			# LN: 81 | 
345   	 006F				cline_81_0:			/* LN: 83 | CYCLE: 0 | RULES: () */ 
346   	 006F				label_begin_94:			/* LN: 81 | CYCLE: 0 | RULES: () */ 
347   	 006F	 9075020D		i0 = i7 - (0x20d)			# LN: 83 | 
348   	 0070	 00004DC0		a0 = 0			# LN: 83 | 
349   	 0071	 98540000		xmem[i0] = a0h			# LN: 83 | 
350   	 0072				for_4:			/* LN: 83 | CYCLE: 0 | RULES: () */ 
351   	 0072	 9075020D		i0 = i7 - (0x20d)			# LN: 83 | 
352   	 0073	 88140000		a0 = xmem[i0]			# LN: 83 | 
353   	 0074	 90750106		i0 = i7 - (0x106)			# LN: 83 | 
354   	 0075	 89140000		a1 = xmem[i0]			# LN: 83 | 
355   	 0076	 00004F08		a0 - a1			# LN: 83 | 
356   	 0077	 84C80091		if (a >= 0) jmp (for_end_4)			# LN: 83 | 
357   	 0078				cline_83_0:			/* LN: 85 | CYCLE: 0 | RULES: () */ 
358   	 0078	 90750105		i0 = i7 - (0x105)			# LN: 85 | 
359   	 0079	 B0140000		i0 = xmem[i0]			# LN: 85 | 
360   	 007A	 80880000		call (_cl_wavread_recvsample)			# LN: 85 | 
361   	 007B	 9075020E		i0 = i7 - (0x20e)			# LN: 85 | 
362   	 007C	 98540000		xmem[i0] = a0h			# LN: 85 | 
363   	 007D				cline_85_0:			/* LN: 86 | CYCLE: 0 | RULES: () */ 
364   	 007D	 9075020D		i0 = i7 - (0x20d)			# LN: 86 | 
365   	 007E	 88140000		a0 = xmem[i0]			# LN: 86 | 
366   	 007F	 00004EC0		a0 = a0 << 4			# LN: 86 | 
367   	 0080	 48707FFF		i0 = a0			# LN: 86 | 
368   	 0081	 9175020C		i1 = i7 - (0x20c)			# LN: 86 | 
369   	 0082	 80050000		i0 = i0 + (_sampleBuffer + 0)			# LN: 86 | 
370   	 0083	 88140001		a0 = xmem[i1]			# LN: 86 | 
371   	 0084	 09707FFF		a1 = i0			# LN: 86 | 
372   	 0085	 00004480		a0 = a1 + a0			# LN: 86 | 
373   	 0086	 98090030		AnyReg(i0, a0h)			# LN: 86 | 
374   	 0087	 9175020E		i1 = i7 - (0x20e)			# LN: 86 | 
375   	 0088	 88140001		a0 = xmem[i1]			# LN: 86 | 
376   	 0089	 98D40000		ymem[i0] = a0h			# LN: 86 | 
377   	 008A				cline_86_0:			/* LN: 83 | CYCLE: 0 | RULES: () */ 
378   	 008A				init_latch_label_2:			/* LN: 87 | CYCLE: 0 | RULES: () */ 
379   	 008A	 9075020D		i0 = i7 - (0x20d)			# LN: 83 | 
380   	 008B	 88140000		a0 = xmem[i0]			# LN: 83 | 
381   	 008C	 894A0001		uhalfword(a1) = (0x1)			# LN: 83 | 
382   	 008D	 00004408		a0 = a0 + a1			# LN: 83 | 
383   	 008E	 9075020D		i0 = i7 - (0x20d)			# LN: 83 | 
384   	 008F	 98540000		xmem[i0] = a0h			# LN: 83 | 
385   	 0090	 80080072		jmp (for_4)			# LN: 83 | 
386   	 0091				cline_83_1:			/* LN: 81 | CYCLE: 0 | RULES: () */ 
387   	 0091				init_latch_label_3:			/* LN: 88 | CYCLE: 0 | RULES: () */ 
388   	 0091				for_end_4:			/* LN: 83 | CYCLE: 0 | RULES: () */ 
389   	 0091	 9075020C		i0 = i7 - (0x20c)			# LN: 81 | 
390   	 0092	 88140000		a0 = xmem[i0]			# LN: 81 | 
391   	 0093	 894A0001		uhalfword(a1) = (0x1)			# LN: 81 | 
392   	 0094	 00004408		a0 = a0 + a1			# LN: 81 | 
393   	 0095	 9075020C		i0 = i7 - (0x20c)			# LN: 81 | 
394   	 0096				label_end_94:			# LN: 81 | CYCLE: 5 | RULES: ()
395   	 0096	 98540000		xmem[i0] = a0h			# LN: 81 | 
396   	 0097				cline_81_1:			/* LN: 90 | CYCLE: 0 | RULES: () */ 
397   	 0097				for_end_3:			/* LN: 81 | CYCLE: 0 | RULES: () */ 
398   	 0097	 A0040000		a0g = xmem[__extractedConst_0_1 + 0]			# LN: 90 | 
399   	 0098	 98040001		a0h = xmem[__extractedConst_0_1 + 1]			# LN: 90 | 
400   	 0099	 90040002		a0l = xmem[__extractedConst_0_1 + 2]			# LN: 90 | 
401   	 009A	 90750211		i0 = i7 - (0x211)			# LN: 90 | 
402   	 009B	 A0540010		xmem[i0] = a0g; i0 += 1			# LN: 90, 90 | 
403   	 009C	 98540010		xmem[i0] = a0h; i0 += 1			# LN: 90, 90 | 
404   	 009D	 90540000		xmem[i0] = a0l			# LN: 90 | 
405   	 009E				cline_90_0:			/* LN: 91 | CYCLE: 0 | RULES: () */ 
406   	 009E	 90750211		i0 = i7 - (0x211)			# LN: 91 | 
407   	 009F	 A0140010		a0g = xmem[i0]; i0 += 1			# LN: 91, 91 | 
408   	 00A0	 98140010		a0h = xmem[i0]; i0 += 1			# LN: 91, 91 | 
409   	 00A1	 90140000		a0l = xmem[i0]			# LN: 91 | 
410   	 00A2	 00004E40		a0 = a0 >> 1			# LN: 91 | 
411   	 00A3	 90750211		i0 = i7 - (0x211)			# LN: 91 | 
412   	 00A4	 A0540010		xmem[i0] = a0g; i0 += 1			# LN: 91, 91 | 
413   	 00A5	 98540010		xmem[i0] = a0h; i0 += 1			# LN: 91, 91 | 
414   	 00A6	 90540000		xmem[i0] = a0l			# LN: 91 | 
415   	 00A7				cline_91_0:			/* LN: 92 | CYCLE: 0 | RULES: () */ 
416   	 00A7	 90750211		i0 = i7 - (0x211)			# LN: 92 | 
417   	 00A8	 A0140010		a0g = xmem[i0]; i0 += 1			# LN: 92, 92 | 
418   	 00A9	 98140010		a0h = xmem[i0]; i0 += 1			# LN: 92, 92 | 
419   	 00AA	 90140000		a0l = xmem[i0]			# LN: 92 | 
420   	 00AB	 88440000		xmem[_distorsion_gain + 0] = a0			# LN: 92 | 
421   	 00AC				cline_92_0:			/* LN: 93 | CYCLE: 0 | RULES: () */ 
422   	 00AC	 88040000		a0 = xmem[_distorsion_mode + 0]			# LN: 93 | 
423   	 00AD	 89040000		a1 = xmem[_distorsion_gain + 0]			# LN: 93 | 
424   	 00AE	 A0050000		i0 = (0) + (_my_state)			# LN: 93 | 
425   	 00AF	 80880000		call (_distortionInit)			# LN: 93 | 
426   	 00B0				cline_93_0:			/* LN: 94 | CYCLE: 0 | RULES: () */ 
427   	 00B0	 80880000		call (_processing)			# LN: 94 | 
428   	 00B1				cline_94_0:			/* LN: 96 | CYCLE: 0 | RULES: () */ 
429   	 00B1	 9075020C		i0 = i7 - (0x20c)			# LN: 96 | 
430   	 00B2	 00004DC0		a0 = 0			# LN: 96 | 
431   	 00B3	 98540000		xmem[i0] = a0h			# LN: 96 | 
432   	 00B4	 810000DB		do (0x10), label_end_95			# LN: 96 | 
433   	 00B5				cline_96_0:			/* LN: 98 | CYCLE: 0 | RULES: () */ 
434   	 00B5				label_begin_95:			/* LN: 96 | CYCLE: 0 | RULES: () */ 
435   	 00B5	 9075020D		i0 = i7 - (0x20d)			# LN: 98 | 
436   	 00B6	 00004DC0		a0 = 0			# LN: 98 | 
437   	 00B7	 98540000		xmem[i0] = a0h			# LN: 98 | 
438   	 00B8				for_6:			/* LN: 98 | CYCLE: 0 | RULES: () */ 
439   	 00B8	 9075020D		i0 = i7 - (0x20d)			# LN: 98 | 
440   	 00B9	 88140000		a0 = xmem[i0]			# LN: 98 | 
441   	 00BA	 89040000		a1 = xmem[_CURRENT_CH_NUM + 0]			# LN: 98 | 
442   	 00BB	 00004F08		a0 - a1			# LN: 98 | 
443   	 00BC	 84C800D6		if (a >= 0) jmp (for_end_6)			# LN: 98 | 
444   	 00BD				cline_98_0:			/* LN: 100 | CYCLE: 0 | RULES: () */ 
445   	 00BD	 9075020D		i0 = i7 - (0x20d)			# LN: 100 | 
446   	 00BE	 88140000		a0 = xmem[i0]			# LN: 100 | 
447   	 00BF	 00004EC0		a0 = a0 << 4			# LN: 100 | 
448   	 00C0	 48707FFF		i0 = a0			# LN: 100 | 
449   	 00C1	 9175020C		i1 = i7 - (0x20c)			# LN: 100 | 
450   	 00C2	 80050000		i0 = i0 + (_sampleBuffer + 0)			# LN: 100 | 
451   	 00C3	 88140001		a0 = xmem[i1]			# LN: 100 | 
452   	 00C4	 09707FFF		a1 = i0			# LN: 100 | 
453   	 00C5	 00004480		a0 = a1 + a0			# LN: 100 | 
454   	 00C6	 98090030		AnyReg(i0, a0h)			# LN: 100 | 
455   	 00C7	 9175020E		i1 = i7 - (0x20e)			# LN: 100 | 
456   	 00C8	 88940000		a0 = ymem[i0]			# LN: 100 | 
457   	 00C9	 98540001		xmem[i1] = a0h			# LN: 100 | 
458   	 00CA				cline_100_0:			/* LN: 101 | CYCLE: 0 | RULES: () */ 
459   	 00CA	 9075020A		i0 = i7 - (0x20a)			# LN: 101 | 
460   	 00CB	 9175020E		i1 = i7 - (0x20e)			# LN: 101 | 
461   	 00CC	 88140001		a0 = xmem[i1]			# LN: 101 | 
462   	 00CD	 B0140000		i0 = xmem[i0]			# LN: 101 | 
463   	 00CE	 80880000		call (_cl_wavwrite_sendsample)			# LN: 101 | 
464   	 00CF				cline_101_0:			/* LN: 98 | CYCLE: 0 | RULES: () */ 
465   	 00CF				init_latch_label_4:			/* LN: 102 | CYCLE: 0 | RULES: () */ 
466   	 00CF	 9075020D		i0 = i7 - (0x20d)			# LN: 98 | 
467   	 00D0	 88140000		a0 = xmem[i0]			# LN: 98 | 
468   	 00D1	 894A0001		uhalfword(a1) = (0x1)			# LN: 98 | 
469   	 00D2	 00004408		a0 = a0 + a1			# LN: 98 | 
470   	 00D3	 9075020D		i0 = i7 - (0x20d)			# LN: 98 | 
471   	 00D4	 98540000		xmem[i0] = a0h			# LN: 98 | 
472   	 00D5	 800800B8		jmp (for_6)			# LN: 98 | 
473   	 00D6				cline_98_1:			/* LN: 96 | CYCLE: 0 | RULES: () */ 
474   	 00D6				init_latch_label_5:			/* LN: 103 | CYCLE: 0 | RULES: () */ 
475   	 00D6				for_end_6:			/* LN: 98 | CYCLE: 0 | RULES: () */ 
476   	 00D6	 9075020C		i0 = i7 - (0x20c)			# LN: 96 | 
477   	 00D7	 88140000		a0 = xmem[i0]			# LN: 96 | 
478   	 00D8	 894A0001		uhalfword(a1) = (0x1)			# LN: 96 | 
479   	 00D9	 00004408		a0 = a0 + a1			# LN: 96 | 
480   	 00DA	 9075020C		i0 = i7 - (0x20c)			# LN: 96 | 
481   	 00DB				label_end_95:			# LN: 96 | CYCLE: 5 | RULES: ()
482   	 00DB	 98540000		xmem[i0] = a0h			# LN: 96 | 
483   	 00DC				cline_96_1:			/* LN: 79 | CYCLE: 0 | RULES: () */ 
484   	 00DC				init_latch_label_6:			/* LN: 104 | CYCLE: 0 | RULES: () */ 
485   	 00DC				for_end_5:			/* LN: 96 | CYCLE: 0 | RULES: () */ 
486   	 00DC	 9075020B		i0 = i7 - (0x20b)			# LN: 79 | 
487   	 00DD	 88140000		a0 = xmem[i0]			# LN: 79 | 
488   	 00DE	 894A0001		uhalfword(a1) = (0x1)			# LN: 79 | 
489   	 00DF	 00004408		a0 = a0 + a1			# LN: 79 | 
490   	 00E0	 9075020B		i0 = i7 - (0x20b)			# LN: 79 | 
491   	 00E1	 98540000		xmem[i0] = a0h			# LN: 79 | 
492   	 00E2	 80080063		jmp (for_2)			# LN: 79 | 
493   	 00E3				cline_79_1:			/* LN: 109 | CYCLE: 0 | RULES: () */ 
494   	 00E3				for_end_2:			/* LN: 79 | CYCLE: 0 | RULES: () */ 
495   	 00E3	 90750105		i0 = i7 - (0x105)			# LN: 109 | 
496   	 00E4	 B0140000		i0 = xmem[i0]			# LN: 109 | 
497   	 00E5	 80880000		call (_cl_wavread_close)			# LN: 109 | 
498   	 00E6				cline_109_0:			/* LN: 110 | CYCLE: 0 | RULES: () */ 
499   	 00E6	 9075020A		i0 = i7 - (0x20a)			# LN: 110 | 
500   	 00E7	 B0140000		i0 = xmem[i0]			# LN: 110 | 
501   	 00E8	 80880000		call (_cl_wavwrite_close)			# LN: 110 | 
502   	 00E9				cline_110_0:			/* LN: 113 | CYCLE: 0 | RULES: () */ 
503   	 00E9	 00004DC0		a0 = 0			# LN: 113 | 
504   	 00EA	 800800EB		jmp (__epilogue_228)			# LN: 113 | 
505   	 00EB				cline_113_0:			/* LN: 114 | CYCLE: 0 | RULES: () */ 
506   	 00EB				__epilogue_228:			/* LN: 114 | CYCLE: 0 | RULES: () */ 
507   	 00EB	 97750211		i7 = i7 - (0x211)			# LN: 114 | 
508   	 00EC	 02177FFF		i7 -= 1			# LN: 114 | 
509   	 00ED	 81880000		ret			# LN: 114 | 
510   						(null)
				 SYMBOL TABLE 

    Name                                                                                    Type                  Value 

_COMMON_INC_PATH_                                                               					 Define                 "C:/CirrusDSP/crystal32/common/inc/"
_CURRENT_CH_NUM                                                                 			  Public Relocatable       main_GEN_0000:0000H
_DSP_                                                                           					 Define                 "a"
_LOCAL_INC_PATH_                                                                					 Define                 "inc/"
_LOCAL_SRC_PATH_                                                                					 Define                 "src/"
_MUI_VERSION_                                                                   					 Define                 "020000"
_OVLY_                                                                          					 Define                 "standalone"
_OVLY_REVISION_                                                                 					 Define                 "020000"
_ROUTER_INC_PATH_                                                               					 Define                 "rom_inc/"
_SLOT_                                                                          					 Define                 "0"
_TARGET_FAMILY_                                                                 					 Define                 "crystal32"
_TOOLS_VERSION_                                                                 					 Define                 "0x0701"
_VERSION_                                                                       					 Define                 "00"
__CASM_VER__                                                                    			  Unused Variable		        0 (701H)
__div                                                                           					 External   
__epilogue_228                                                                  			         Relocatable         main_GEN_0010:00EBH
__extractedConst_0_1                                                            			         Relocatable         main_GEN_0001:0000H
__start                                                                         					 External   
_cl_wavread_bits_per_sample                                                     					 External   
_cl_wavread_close                                                               					 External   
_cl_wavread_frame_rate                                                          					 External   
_cl_wavread_getnchannels                                                        					 External   
_cl_wavread_number_of_frames                                                    					 External   
_cl_wavread_open                                                                					 External   
_cl_wavread_recvsample                                                          					 External   
_cl_wavwrite_close                                                              					 External   
_cl_wavwrite_open                                                               					 External   
_cl_wavwrite_sendsample                                                         					 External   
_distorsion_gain                                                                			  Public Relocatable       main_GEN_0002:0000H
_distorsion_mode                                                                			  Public Relocatable       main_GEN_0003:0000H
_distortionInit                                                                 					 External   
_main                                                                           			  Public Relocatable       main_GEN_0010:0000H
_my_state                                                                       			  Public Relocatable       main_GEN_0004:0000H
_printf                                                                         					 External   
_processing                                                                     					 External   
_sampleBuffer                                                                   			  Public Relocatable       main_GEN_0005:0000H
_strcpy                                                                         					 External   
_string_const_0                                                                 			         Relocatable         main_GEN_0006:0000H
_string_const_1                                                                 			         Relocatable         main_GEN_0007:0000H
_string_const_2                                                                 			         Relocatable         main_GEN_0008:0000H
_string_const_3                                                                 			         Relocatable         main_GEN_0009:0000H
cline_100_0                                                                     			  Unused Relocatable        main_GEN_0010:00CAH
cline_101_0                                                                     			  Unused Relocatable        main_GEN_0010:00CFH
cline_109_0                                                                     			  Unused Relocatable        main_GEN_0010:00E6H
cline_110_0                                                                     			  Unused Relocatable        main_GEN_0010:00E9H
cline_113_0                                                                     			  Unused Relocatable        main_GEN_0010:00EBH
cline_17_0                                                                      			  Unused Relocatable        main_GEN_0010:0007H
cline_34_0                                                                      			  Unused Relocatable        main_GEN_0010:000BH
cline_34_1                                                                      			  Unused Relocatable        main_GEN_0010:0027H
cline_35_0                                                                      			  Unused Relocatable        main_GEN_0010:000FH
cline_35_1                                                                      			  Unused Relocatable        main_GEN_0010:0021H
cline_36_0                                                                      			  Unused Relocatable        main_GEN_0010:001BH
cline_41_0                                                                      			  Unused Relocatable        main_GEN_0010:002AH
cline_42_0                                                                      			  Unused Relocatable        main_GEN_0010:002FH
cline_43_0                                                                      			  Unused Relocatable        main_GEN_0010:0033H
cline_45_0                                                                      			  Unused Relocatable        main_GEN_0010:0035H
cline_46_0                                                                      			  Unused Relocatable        main_GEN_0010:0037H
cline_52_0                                                                      			  Unused Relocatable        main_GEN_0010:003CH
cline_53_0                                                                      			  Unused Relocatable        main_GEN_0010:0041H
cline_54_0                                                                      			  Unused Relocatable        main_GEN_0010:0046H
cline_55_0                                                                      			  Unused Relocatable        main_GEN_0010:004BH
cline_61_0                                                                      			  Unused Relocatable        main_GEN_0010:004EH
cline_62_0                                                                      			  Unused Relocatable        main_GEN_0010:0058H
cline_63_0                                                                      			  Unused Relocatable        main_GEN_0010:005CH
cline_65_0                                                                      			  Unused Relocatable        main_GEN_0010:005EH
cline_66_0                                                                      			  Unused Relocatable        main_GEN_0010:0060H
cline_79_0                                                                      			  Unused Relocatable        main_GEN_0010:006BH
cline_79_1                                                                      			  Unused Relocatable        main_GEN_0010:00E3H
cline_81_0                                                                      			  Unused Relocatable        main_GEN_0010:006FH
cline_81_1                                                                      			  Unused Relocatable        main_GEN_0010:0097H
cline_83_0                                                                      			  Unused Relocatable        main_GEN_0010:0078H
cline_83_1                                                                      			  Unused Relocatable        main_GEN_0010:0091H
cline_85_0                                                                      			  Unused Relocatable        main_GEN_0010:007DH
cline_86_0                                                                      			  Unused Relocatable        main_GEN_0010:008AH
cline_90_0                                                                      			  Unused Relocatable        main_GEN_0010:009EH
cline_91_0                                                                      			  Unused Relocatable        main_GEN_0010:00A7H
cline_92_0                                                                      			  Unused Relocatable        main_GEN_0010:00ACH
cline_93_0                                                                      			  Unused Relocatable        main_GEN_0010:00B0H
cline_94_0                                                                      			  Unused Relocatable        main_GEN_0010:00B1H
cline_96_0                                                                      			  Unused Relocatable        main_GEN_0010:00B5H
cline_96_1                                                                      			  Unused Relocatable        main_GEN_0010:00DCH
cline_98_0                                                                      			  Unused Relocatable        main_GEN_0010:00BDH
cline_98_1                                                                      			  Unused Relocatable        main_GEN_0010:00D6H
dummy                                                                           			  Unused Number				     0 (0H)
else_0                                                                          			         Relocatable         main_GEN_0010:0037H
else_1                                                                          			         Relocatable         main_GEN_0010:0060H
endif_0                                                                         			  Unused Relocatable        main_GEN_0010:0037H
endif_1                                                                         			  Unused Relocatable        main_GEN_0010:0060H
for_2                                                                           			         Relocatable         main_GEN_0010:0063H
for_4                                                                           			         Relocatable         main_GEN_0010:0072H
for_6                                                                           			         Relocatable         main_GEN_0010:00B8H
for_end_0                                                                       			  Unused Relocatable        main_GEN_0010:0027H
for_end_1                                                                       			  Unused Relocatable        main_GEN_0010:0021H
for_end_2                                                                       			         Relocatable         main_GEN_0010:00E3H
for_end_3                                                                       			  Unused Relocatable        main_GEN_0010:0097H
for_end_4                                                                       			         Relocatable         main_GEN_0010:0091H
for_end_5                                                                       			  Unused Relocatable        main_GEN_0010:00DCH
for_end_6                                                                       			         Relocatable         main_GEN_0010:00D6H
init_latch_label_0                                                              			  Unused Relocatable        main_GEN_0010:001BH
init_latch_label_1                                                              			  Unused Relocatable        main_GEN_0010:0021H
init_latch_label_2                                                              			  Unused Relocatable        main_GEN_0010:008AH
init_latch_label_3                                                              			  Unused Relocatable        main_GEN_0010:0091H
init_latch_label_4                                                              			  Unused Relocatable        main_GEN_0010:00CFH
init_latch_label_5                                                              			  Unused Relocatable        main_GEN_0010:00D6H
init_latch_label_6                                                              			  Unused Relocatable        main_GEN_0010:00DCH
label_begin_92                                                                  			  Unused Relocatable        main_GEN_0010:000FH
label_begin_93                                                                  			  Unused Relocatable        main_GEN_0010:000BH
label_begin_94                                                                  			  Unused Relocatable        main_GEN_0010:006FH
label_begin_95                                                                  			  Unused Relocatable        main_GEN_0010:00B5H
label_end_92                                                                    			         Relocatable         main_GEN_0010:0020H
label_end_93                                                                    			         Relocatable         main_GEN_0010:0026H
label_end_94                                                                    			         Relocatable         main_GEN_0010:0096H
label_end_95                                                                    			         Relocatable         main_GEN_0010:00DBH

	       SEGMENTS:

Size			  Name										 Class
0000H	 __INIT                                  			 CODE                                    
0001H	 main_GEN_0000                           			 X_OVLY                                  
0003H	 main_GEN_0001                           			 X_OVLY                                  
0001H	 main_GEN_0002                           			 X_OVLY                                  
0001H	 main_GEN_0003                           			 X_OVLY                                  
0002H	 main_GEN_0004                           			 X_OVLY                                  
0080H	 main_GEN_0005                           			 Y_OVLY                                  
0023H	 main_GEN_0006                           			 X_OVLY                                  
0021H	 main_GEN_0007                           			 X_OVLY                                  
001FH	 main_GEN_0008                           			 X_OVLY                                  
0021H	 main_GEN_0009                           			 X_OVLY                                  
00EEH	 main_GEN_0010                           			 CODE_OVLY                               
